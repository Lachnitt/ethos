(declare-sort Real 0)
(declare-consts <rational> Real)
(declare-consts <decimal> Real)
(declare-sort BitVec 0)
(declare-consts <binary> BitVec)
(declare-consts <hexadecimal> BitVec)
(declare-sort String 0)
(declare-consts <string> String)

(declare-const ok (-> (! Type :var T :implicit) T Bool))

(declare-rule test_to_str ((T Type) (x T) (s String))
  :args (x s)
  :requires (((alf.to_str x) s))
  :conclusion (ok x))

;(step @p0 (ok 1.1) :rule test_to_str :args (1.1 "1.1"))
(step @p1 (ok 2/12) :rule test_to_str :args (2/12 "1/6"))
(step @p2 (ok #b001) :rule test_to_str :args (#b001 "#b001"))
(step @p3 (ok #xab) :rule test_to_str :args (#xAB "#xab"))
(step @p4 (ok "abc") :rule test_to_str :args ("abc" "abc"))

