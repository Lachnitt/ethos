TODO:

- remove custom nil construction policy?
- :syntax
- arity overloading?
- remove closure parsing?
- check type preservation for evaluation?
  - more generally: a weaker type system for program bodies??
- separate symbol table for proof rules?
- ensure assumption scope level is preserved per include file
- Temporary memory allocation of Expr within calls to evaluation?
- minimize compiled code by recognizing alpha-equivalent patterns
    - parameters can be shared??
- lazy construction of definitions when compiled?
- non-exponential alf.ite compilation

COMPLETED:

- datatypes
- literal ops to compiler
- auto-evaluate literal ops
- change syntax for nil, for eval.
- :restrict
- bitvectors
- datatype testers
- howto: bitvector literal type rule
- strings
- alf.ite smart evaluation, not just literals
- alf.is_eq not just literals
- change @ to _
- :requires for implicit is dropped, maybe simplify
- failures in side conditions?
- generalize CLI
- show compiled files via --show-config
- proper compilation of alf.ite / alf.is_eq
